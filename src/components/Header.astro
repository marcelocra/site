---
import { LINK_STYLE } from "../libs/constants";
---

<div class="flex flex-row gap-3 items-center align-middle justify-center">
  <a class={LINK_STYLE} href="/">Home</a>
  <a class={LINK_STYLE} href="/about/">About</a>
  <a class={LINK_STYLE} href="/blog/">Blog</a>
  <a class={LINK_STYLE} href="/tags/">Tags</a>
  <button id="themeIcon">
    <span class="material-symbols-outlined dark:block hidden dark:text-blue-200"
      >light_mode</span
    >
    <span class="material-symbols-outlined dark:hidden block">dark_mode</span>
  </button>
</div>

<script>
  // To avoid having the light theme flashing when content is swapping, the
  // documentation states the following:
  //
  //     The theme toggle works on every page, but its script is loaded at the
  //     end of the navigation process, after the new page has fully loaded in
  //     the browser. There may be a flash of the light theme version of the
  //     site before this theme toggle script runs and checks which theme it
  //     should use on the page.
  //
  //     To check for, and if necessary set, dark mode earlier in the navigation
  //     process, create a function that will run in response to the
  //     astro:after-swap event. The following function to check the browserâ€™s
  //     localStorage for dark theme will run immediately after the new page has
  //     replaced the old page, before the DOM elements are painted to the
  //     screen.
  //
  //     Source: https://docs.astro.build/en/tutorials/add-view-transitions/
  //     (Search for "prevent flashing in dark mode")

  document.addEventListener("astro:after-swap", () => {
    localStorage.theme === "dark"
      ? document.documentElement.classList.add("dark")
      : document.documentElement.classList.remove("dark");
  });
</script>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const theme = (() => {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        return "dark";
      }
      return "light";
    })();

    if (theme === "light") {
      document.documentElement.classList.remove("dark");
    } else {
      document.documentElement.classList.add("dark");
    }

    window.localStorage.setItem("theme", theme);

    const handleToggleClick = () => {
      const element = document.documentElement;
      element.classList.toggle("dark");

      const isDark = element.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    };

    document
      .getElementById("themeIcon")
      .addEventListener("click", handleToggleClick);
  });
</script>
