---
import { marked } from "marked";

import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";

const posts = (
  await getCollection("blog", ({ data }) => {
    return import.meta.env.PROD ? data.draft !== true : true;
  })
).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
---

<BaseLayout>
  <section class="m-5">
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-5">
      {
        posts.map((post) => (
          <blog-post-card data-slug={post.slug}>
            <div class="relative border border-slate-400 rounded-lg bg-gradient-to-b from-[var(--bg-bege)] to-[var(--light-gray)] duration-300 hover:scale-[1.03] p-4 flex flex-col gap-3 cursor-pointer h-full">
              {post.data.draft && (
                <div class="absolute top-0 right-0 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-bl-lg rounded-tr-md">
                  Draft
                </div>
              )}
              <FormattedDate class="font-mono" date={post.data.pubDate} />
              <div class="font-bold">{post.data.title}</div>
              <div class="text-sm">
                <Fragment
                  set:html={marked.parseInline(post.data.description)}
                />
              </div>

              {/* Update this later, to place text over image.
              {post.data.heroImage ? (
                <div class="relative">
                  <div class="absolute left-1/2 transform -translate-x-1/2 top-1/2 -translate-y-1/2 bg-gray-300 p-10 rounded uppercase font-bold shadow-[0px_0px_10px_3px_rgba(0,0,0,1)]">
                    {post.data.title}
                  </div>
                  <img src={post.data.heroImage} class="rounded-lg" />
                </div>
              ) : (
                <div>{post.data.title}</div>
              )} */}
            </div>
          </blog-post-card>
        ))
      }
    </div>
  </section>
</BaseLayout>

<script>
  class BlogPostCard extends HTMLElement {
    constructor() {
      super();

      // when user clicks, redirect to post.slug
      this.addEventListener("click", () => {
        window.location.href = `/blog/${this.dataset.slug}/`;
      });
    }
  }

  customElements.define("blog-post-card", BlogPostCard);
</script>
